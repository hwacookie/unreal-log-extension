{
  "stats": {
    "suites": 6,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "start": "2025-05-21T21:29:43.011Z",
    "end": "2025-05-21T21:30:05.511Z",
    "duration": 22500,
    "testsRegistered": 14,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "6b787dc1-f3d7-44bb-a114-227c2e46649d",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 1073,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "await (0, testUtils_1.activateExtension)();\nawait (0, testUtils_1.focusUnrealLogView)();\nawait (0, testUtils_1.delay)((0, testUtils_1.getWebviewReadyDelayMs)()); // Ensure webview is ready",
          "err": {},
          "uuid": "894ff55c-873e-49ba-8f64-48fff9f322c8",
          "parentUUID": "6b787dc1-f3d7-44bb-a114-227c2e46649d",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 502,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "await (0, testUtils_1.activateExtension)();\nawait (0, testUtils_1.focusUnrealLogView)();",
          "err": {},
          "uuid": "d05de826-d909-4de3-ac2e-3d3d4695f00e",
          "parentUUID": "6b787dc1-f3d7-44bb-a114-227c2e46649d",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "042db38c-aeba-41bc-a6a6-7451d7dc48af",
          "title": "Unreal Log Viewer Extension - Basic Tests",
          "fullFile": "p:\\prj\\UnrealLogViewer\\unreal-log-extension\\out\\test\\ui\\basic.test.js",
          "file": "p:\\prj\\UnrealLogViewer\\unreal-log-extension\\out\\test\\ui\\basic.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should activate the extension",
              "fullTitle": "Unreal Log Viewer Extension - Basic Tests should activate the extension",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const extension = vscode.extensions.getExtension('coregames.unreal-log-viewer');\nassert.ok(extension, 'Extension should be found.');\nawait extension.activate();\nassert.ok(extension.isActive, 'Extension should be active after activation.');",
              "err": {},
              "uuid": "58a21617-0ba0-4fb8-bc76-c5bad1a4a199",
              "parentUUID": "042db38c-aeba-41bc-a6a6-7451d7dc48af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should open the Unreal Log Viewer view in the panel",
              "fullTitle": "Unreal Log Viewer Extension - Basic Tests should open the Unreal Log Viewer view in the panel",
              "timedOut": false,
              "duration": 1007,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const extension = vscode.extensions.getExtension('coregames.unreal-log-viewer');\nassert.ok(extension, 'Extension should be found to open view.');\nif (extension) {\n    if (!extension.isActive) {\n        await extension.activate();\n    }\n    assert.ok(extension.isActive, 'Extension must be active to open view.');\n    // Use the utility function to focus the view, which now handles panel layout\n    await (0, testUtils_1.focusUnrealLogView)();\n    await new Promise(resolve => setTimeout(resolve, (0, testUtils_1.getWebviewReadyDelayMs)()));\n    // At this point, the view should be in the panel and focused.\n    // For this basic test, we'll just assert that the command was called.\n    // More detailed view state assertions can be in other tests.\n    assert.ok(true, 'focusUnrealLogView utility function executed, view should be in panel.');\n}\nelse {\n    assert.fail('Extension was not found, cannot proceed to open view.');\n}",
              "err": {},
              "uuid": "aca33d7c-cc4b-4cad-b016-0118b821731a",
              "parentUUID": "042db38c-aeba-41bc-a6a6-7451d7dc48af",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "58a21617-0ba0-4fb8-bc76-c5bad1a4a199",
            "aca33d7c-cc4b-4cad-b016-0118b821731a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1007,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "7466a837-14be-4be9-8ab7-5de95a2d3d2b",
          "title": "Unreal Log Viewer - Filter Controls UI Tests",
          "fullFile": "p:\\prj\\UnrealLogViewer\\unreal-log-extension\\out\\test\\ui\\filterControls.test.js",
          "file": "p:\\prj\\UnrealLogViewer\\unreal-log-extension\\out\\test\\ui\\filterControls.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "test 0004: should toggle filter visibility when \"Toggle Filter Bar\" command is executed",
              "fullTitle": "Unreal Log Viewer - Filter Controls UI Tests test 0004: should toggle filter visibility when \"Toggle Filter Bar\" command is executed",
              "timedOut": false,
              "duration": 1612,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(20000); // Increased timeout for UI operations\nawait (0, testUtils_1.focusUnrealLogView)(); // Ensure the view is focused\nawait (0, testUtils_1.delay)((0, testUtils_1.getWebviewReadyDelayMs)());\n// 1. Get initial state of the filter container\nlet filterControlsElements = await (0, testUtils_1.getWebviewElements)('#filter-controls');\nassert.ok(filterControlsElements.length > 0, 'Filter controls div should exist.');\nlet filterControlsDiv = filterControlsElements[0];\nconst initialIsHidden = filterControlsDiv.attributes.class?.includes('hidden') ?? false;\nconsole.log('Initial filter controls hidden state:', initialIsHidden);\n// 2. Execute the command to toggle filter bar visibility\nconsole.log('Executing command unrealLogViewer.toggleFilterBarVisibility...');\nawait vscode.commands.executeCommand('unrealLogViewer.toggleFilterBarVisibility');\nawait (0, testUtils_1.delay)((0, testUtils_1.getCommandExecutionDelayMs)() + 200); // Allow UI to update (added a bit more delay for message passing)\n// 3. Get new state of the filter container\nfilterControlsElements = await (0, testUtils_1.getWebviewElements)('#filter-controls');\nassert.ok(filterControlsElements.length > 0, 'Filter controls div should still exist.');\nfilterControlsDiv = filterControlsElements[0];\nconst isHiddenAfterFirstToggle = filterControlsDiv.attributes.class?.includes('hidden') ?? false;\nconsole.log('Filter controls hidden state after first toggle:', isHiddenAfterFirstToggle);\n// Assert that the hidden state has changed\nassert.notStrictEqual(isHiddenAfterFirstToggle, initialIsHidden, `Filter controls hidden state should change after first toggle. Initial: ${initialIsHidden}, After toggle: ${isHiddenAfterFirstToggle}`);\n// 4. Execute the command again to toggle back\nconsole.log('Executing command unrealLogViewer.toggleFilterBarVisibility again...');\nawait vscode.commands.executeCommand('unrealLogViewer.toggleFilterBarVisibility');\nawait (0, testUtils_1.delay)((0, testUtils_1.getCommandExecutionDelayMs)() + 200); // Allow UI to update\n// 5. Get final state of the filter container\nfilterControlsElements = await (0, testUtils_1.getWebviewElements)('#filter-controls');\nassert.ok(filterControlsElements.length > 0, 'Filter controls div should still exist after second toggle.');\nfilterControlsDiv = filterControlsElements[0];\nconst isHiddenAfterSecondToggle = filterControlsDiv.attributes.class?.includes('hidden') ?? false;\nconsole.log('Filter controls hidden state after second toggle:', isHiddenAfterSecondToggle);\n// Assert that the hidden state has reverted to the initial state\nassert.strictEqual(isHiddenAfterSecondToggle, initialIsHidden, `Filter controls hidden state should revert to initial after second toggle. Initial: ${initialIsHidden}, After second toggle: ${isHiddenAfterSecondToggle}`);",
              "err": {},
              "uuid": "bc11156b-43a6-41ba-8c3a-3c493ea45703",
              "parentUUID": "7466a837-14be-4be9-8ab7-5de95a2d3d2b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bc11156b-43a6-41ba-8c3a-3c493ea45703"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1612,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "16ae70b3-3864-41f9-919b-f65af465c30b",
          "title": "UI Filtering Tests",
          "fullFile": "p:\\prj\\UnrealLogViewer\\unreal-log-extension\\out\\test\\ui\\filtering.test.js",
          "file": "p:\\prj\\UnrealLogViewer\\unreal-log-extension\\out\\test\\ui\\filtering.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"UI Filtering Tests\"",
              "fullTitle": "UI Filtering Tests \"before all\" hook in \"UI Filtering Tests\"",
              "timedOut": false,
              "duration": 616,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await (0, testUtils_1.activateExtension)();\nawait (0, testUtils_1.focusUnrealLogView)();\nconst config = vscode.workspace.getConfiguration('unrealLogViewer');\noriginalUseRelativeTimestamps = config.get('useRelativeTimestamps');\noriginalTimestampFormat = config.get('timestampFormat');\nawait config.update('useRelativeTimestamps', false, vscode.ConfigurationTarget.Global);\nawait config.update('timestampFormat', 'HH:mm:ss.SSS', vscode.ConfigurationTarget.Global);\nawait (0, testUtils_1.delay)((0, testUtils_1.getSetupCompletionDelayMs)());",
              "err": {},
              "uuid": "9a9d36e6-40bf-4a80-9e87-9b89cba5ca55",
              "parentUUID": "16ae70b3-3864-41f9-919b-f65af465c30b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"UI Filtering Tests\"",
              "fullTitle": "UI Filtering Tests \"before each\" hook in \"UI Filtering Tests\"",
              "timedOut": false,
              "duration": 603,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await (0, testUtils_1.focusUnrealLogView)();\nawait (0, testUtils_1.clearLogs)();\nawait vscode.commands.executeCommand('unrealLogViewer.setFiltersForTest', { levelFilter: '', categoryFilter: '', messageFilter: '' });\nconst isPaused = await vscode.commands.executeCommand('unrealLogViewer.getPauseStateForTest');\nif (isPaused) {\n    await vscode.commands.executeCommand('unrealLogViewer.togglePauseForTest');\n}\nawait (0, testUtils_1.delay)((0, testUtils_1.getSetupCompletionDelayMs)());",
              "err": {},
              "uuid": "a9bddc2f-5300-4c83-bfa6-777772f149d4",
              "parentUUID": "16ae70b3-3864-41f9-919b-f65af465c30b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"UI Filtering Tests\"",
              "fullTitle": "UI Filtering Tests \"after all\" hook in \"UI Filtering Tests\"",
              "timedOut": false,
              "duration": 109,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const config = vscode.workspace.getConfiguration('unrealLogViewer');\nawait config.update('useRelativeTimestamps', originalUseRelativeTimestamps, vscode.ConfigurationTarget.Global);\nawait config.update('timestampFormat', originalTimestampFormat, vscode.ConfigurationTarget.Global);\nawait (0, testUtils_1.delay)((0, testUtils_1.getCommandExecutionDelayMs)());",
              "err": {},
              "uuid": "12fda907-491a-4331-9705-a38c2586ae2a",
              "parentUUID": "16ae70b3-3864-41f9-919b-f65af465c30b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"UI Filtering Tests\"",
              "fullTitle": "UI Filtering Tests \"after each\" hook in \"UI Filtering Tests\"",
              "timedOut": false,
              "duration": 603,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await (0, testUtils_1.focusUnrealLogView)();\nconst isPaused = await vscode.commands.executeCommand('unrealLogViewer.getPauseStateForTest');\nif (isPaused) {\n    await vscode.commands.executeCommand('unrealLogViewer.togglePauseForTest');\n}\nawait (0, testUtils_1.clearLogs)();\nawait vscode.commands.executeCommand('unrealLogViewer.setFiltersForTest', { levelFilter: '', categoryFilter: '', messageFilter: '' });\nawait (0, testUtils_1.delay)((0, testUtils_1.getCommandExecutionDelayMs)());",
              "err": {},
              "uuid": "b22c7256-180c-4a29-8eaf-805ac7c72625",
              "parentUUID": "16ae70b3-3864-41f9-919b-f65af465c30b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "test 0004: should filter by log level (Error)",
              "fullTitle": "UI Filtering Tests test 0004: should filter by log level (Error)",
              "timedOut": false,
              "duration": 410,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const logError = { date: new Date().toISOString(), level: 'Error', category: 'TestCat.0004', message: 'Error message 0004' };\nconst logWarning = { date: new Date().toISOString(), level: 'Warning', category: 'TestCat.0004', message: 'Warning message 0004' };\nconst logInfo = { date: new Date().toISOString(), level: 'Log', category: 'TestCat.0004', message: 'Info message 0004' };\nawait (0, testUtils_1.sendTcpLogMessage)(testUtils_1.TEST_PORT, JSON.stringify(logError));\nawait (0, testUtils_1.sendTcpLogMessage)(testUtils_1.TEST_PORT, JSON.stringify(logWarning));\nawait (0, testUtils_1.sendTcpLogMessage)(testUtils_1.TEST_PORT, JSON.stringify(logInfo));\nawait (0, testUtils_1.delay)((0, testUtils_1.getLogProcessingDelayMs)());\nawait vscode.commands.executeCommand('unrealLogViewer.setFiltersForTest', { levelFilter: 'Error' });\nawait (0, testUtils_1.delay)((0, testUtils_1.getCommandExecutionDelayMs)());\nlet displayedLogs = await (0, testUtils_1.getDisplayedLogMessages)();\nassert.strictEqual(displayedLogs.length, 1, 'Test 0004: Should display only 1 log after filtering by Error level');\nassert.strictEqual(displayedLogs[0].message, logError.message, 'Test 0004: Displayed log message mismatch');\nassert.strictEqual(displayedLogs[0].level, 'Error', 'Test 0004: Displayed log level mismatch');\nawait vscode.commands.executeCommand('unrealLogViewer.setFiltersForTest', { levelFilter: '' });\nawait (0, testUtils_1.delay)((0, testUtils_1.getCommandExecutionDelayMs)());\ndisplayedLogs = await (0, testUtils_1.getDisplayedLogMessages)();\nassert.strictEqual(displayedLogs.length, 3, 'Test 0004: Should display all 3 logs after clearing level filter');",
              "err": {},
              "uuid": "b4a49bae-da52-43f5-9805-b4cf02ce9214",
              "parentUUID": "16ae70b3-3864-41f9-919b-f65af465c30b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "test 0005: should filter by category",
              "fullTitle": "UI Filtering Tests test 0005: should filter by category",
              "timedOut": false,
              "duration": 303,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const logCatA = { date: new Date().toISOString(), level: 'Log', category: 'CategoryA.0005', message: 'Message for CategoryA 0005' };\nconst logCatB = { date: new Date().toISOString(), level: 'Log', category: 'CategoryB.0005', message: 'Message for CategoryB 0005' };\nawait (0, testUtils_1.sendTcpLogMessage)(testUtils_1.TEST_PORT, JSON.stringify(logCatA));\nawait (0, testUtils_1.sendTcpLogMessage)(testUtils_1.TEST_PORT, JSON.stringify(logCatB));\nawait (0, testUtils_1.delay)((0, testUtils_1.getLogProcessingDelayMs)());\nawait vscode.commands.executeCommand('unrealLogViewer.setFiltersForTest', { categoryFilter: 'CategoryA.0005' });\nawait (0, testUtils_1.delay)((0, testUtils_1.getCommandExecutionDelayMs)());\nconst displayedLogs = await (0, testUtils_1.getDisplayedLogMessages)();\nassert.strictEqual(displayedLogs.length, 1, 'Test 0005: Should display only 1 log after filtering by CategoryA.0005');\nassert.strictEqual(displayedLogs[0].category, 'CategoryA.0005', 'Test 0005: Displayed log category mismatch');",
              "err": {},
              "uuid": "68c7163a-5258-40be-b887-3b8d21d2d8ef",
              "parentUUID": "16ae70b3-3864-41f9-919b-f65af465c30b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "test 0006: should filter by message content",
              "fullTitle": "UI Filtering Tests test 0006: should filter by message content",
              "timedOut": false,
              "duration": 304,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const logMsg1 = { date: new Date().toISOString(), level: 'Log', category: 'MessageTest.0006', message: 'This is a unique message content 0006' };\nconst logMsg2 = { date: new Date().toISOString(), level: 'Log', category: 'MessageTest.0006', message: 'Another message 0006' };\nawait (0, testUtils_1.sendTcpLogMessage)(testUtils_1.TEST_PORT, JSON.stringify(logMsg1));\nawait (0, testUtils_1.sendTcpLogMessage)(testUtils_1.TEST_PORT, JSON.stringify(logMsg2));\nawait (0, testUtils_1.delay)((0, testUtils_1.getLogProcessingDelayMs)());\nawait vscode.commands.executeCommand('unrealLogViewer.setFiltersForTest', { messageFilter: 'unique message content' });\nawait (0, testUtils_1.delay)((0, testUtils_1.getCommandExecutionDelayMs)());\nconst displayedLogs = await (0, testUtils_1.getDisplayedLogMessages)();\nassert.strictEqual(displayedLogs.length, 1, 'Test 0006: Should display only 1 log after filtering by message content');\nassert.strictEqual(displayedLogs[0].message, logMsg1.message, 'Test 0006: Displayed log message mismatch');",
              "err": {},
              "uuid": "f3117678-fe07-48d7-8da2-3d977f3e0830",
              "parentUUID": "16ae70b3-3864-41f9-919b-f65af465c30b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "test 0007: should filter by multiple criteria (level and category)",
              "fullTitle": "UI Filtering Tests test 0007: should filter by multiple criteria (level and category)",
              "timedOut": false,
              "duration": 304,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const logErrorCatA = { date: new Date().toISOString(), level: 'Error', category: 'FilterCatA.0007', message: 'Error in FilterCatA 0007' };\nconst logWarnCatA = { date: new Date().toISOString(), level: 'Warning', category: 'FilterCatA.0007', message: 'Warning in FilterCatA 0007' };\nconst logErrorCatB = { date: new Date().toISOString(), level: 'Error', category: 'FilterCatB.0007', message: 'Error in FilterCatB 0007' };\nawait (0, testUtils_1.sendTcpLogMessage)(testUtils_1.TEST_PORT, JSON.stringify(logErrorCatA));\nawait (0, testUtils_1.sendTcpLogMessage)(testUtils_1.TEST_PORT, JSON.stringify(logWarnCatA));\nawait (0, testUtils_1.sendTcpLogMessage)(testUtils_1.TEST_PORT, JSON.stringify(logErrorCatB));\nawait (0, testUtils_1.delay)((0, testUtils_1.getLogProcessingDelayMs)());\nawait vscode.commands.executeCommand('unrealLogViewer.setFiltersForTest', { levelFilter: 'Error', categoryFilter: 'FilterCatA.0007' });\nawait (0, testUtils_1.delay)((0, testUtils_1.getCommandExecutionDelayMs)());\nconst displayedLogs = await (0, testUtils_1.getDisplayedLogMessages)();\nassert.strictEqual(displayedLogs.length, 1, 'Test 0007: Should display only 1 log after filtering by Error level and FilterCatA.0007');\nassert.strictEqual(displayedLogs[0].message, logErrorCatA.message, 'Test 0007: Displayed log message mismatch');",
              "err": {},
              "uuid": "04283925-b153-4fff-82ac-e6b6006edaa4",
              "parentUUID": "16ae70b3-3864-41f9-919b-f65af465c30b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "test 0008: should clear all filters",
              "fullTitle": "UI Filtering Tests test 0008: should clear all filters",
              "timedOut": false,
              "duration": 403,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const log1 = { date: new Date().toISOString(), level: 'Error', category: 'ClearTest.0008', message: 'First message for clear test 0008' };\nconst log2 = { date: new Date().toISOString(), level: 'Log', category: 'ClearTest.0008', message: 'Second message for clear test 0008' };\nawait (0, testUtils_1.sendTcpLogMessage)(testUtils_1.TEST_PORT, JSON.stringify(log1));\nawait (0, testUtils_1.sendTcpLogMessage)(testUtils_1.TEST_PORT, JSON.stringify(log2));\nawait (0, testUtils_1.delay)((0, testUtils_1.getLogProcessingDelayMs)());\nawait vscode.commands.executeCommand('unrealLogViewer.setFiltersForTest', { levelFilter: 'Error' });\nawait (0, testUtils_1.delay)((0, testUtils_1.getCommandExecutionDelayMs)());\nlet displayedLogs = await (0, testUtils_1.getDisplayedLogMessages)();\nassert.strictEqual(displayedLogs.length, 1, 'Test 0008: Should show 1 log after initial filter');\nawait vscode.commands.executeCommand('unrealLogViewer.setFiltersForTest', { levelFilter: '', categoryFilter: '', messageFilter: '' });\nawait (0, testUtils_1.delay)((0, testUtils_1.getCommandExecutionDelayMs)());\ndisplayedLogs = await (0, testUtils_1.getDisplayedLogMessages)();\nassert.strictEqual(displayedLogs.length, 2, 'Test 0008: Should show all 2 logs after clearing filters');",
              "err": {},
              "uuid": "170d90e0-73c9-4e5b-a8d6-00997fd0e430",
              "parentUUID": "16ae70b3-3864-41f9-919b-f65af465c30b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b4a49bae-da52-43f5-9805-b4cf02ce9214",
            "68c7163a-5258-40be-b887-3b8d21d2d8ef",
            "f3117678-fe07-48d7-8da2-3d977f3e0830",
            "04283925-b153-4fff-82ac-e6b6006edaa4",
            "170d90e0-73c9-4e5b-a8d6-00997fd0e430"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1724,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "cc0a7f8e-0791-4987-95db-72933ec94b21",
          "title": "Unreal Log Viewer - Basic Log Reception",
          "fullFile": "p:\\prj\\UnrealLogViewer\\unreal-log-extension\\out\\test\\ui\\logReceiving.test.js",
          "file": "p:\\prj\\UnrealLogViewer\\unreal-log-extension\\out\\test\\ui\\logReceiving.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "test 0001: should receive and display a simple log message via TCP",
              "fullTitle": "Unreal Log Viewer - Basic Log Reception test 0001: should receive and display a simple log message via TCP",
              "timedOut": false,
              "duration": 303,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(15000);\nconst testLog = {\n    date: new Date().toISOString(), // Use current time for simplicity in this basic test\n    category: 'BasicTest',\n    level: 'Info',\n    message: 'Basic TCP log reception test.'\n};\nconst testLogMessage = JSON.stringify(testLog) + '\\n';\nawait (0, testUtils_1.delay)((0, testUtils_1.getLogProcessingDelayMs)()); // Updated\nawait (0, testUtils_1.sendTcpLogMessage)(testUtils_1.TEST_PORT, testLogMessage, 'Basic Reception Test: '); // Use TEST_PORT\nawait (0, testUtils_1.delay)((0, testUtils_1.getCommandExecutionDelayMs)()); // Updated\nconst receivedLog = await (0, testUtils_1.getAndVerifyLogEntry)(testLog, 'Basic Reception Test');\nassert.ok(receivedLog, 'The basic test log entry should be present.');",
              "err": {},
              "uuid": "cef1d5b3-dd47-4051-9232-0f1842fcbce4",
              "parentUUID": "cc0a7f8e-0791-4987-95db-72933ec94b21",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cef1d5b3-dd47-4051-9232-0f1842fcbce4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 303,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "8b016c79-e86e-429b-b5c2-e62d9d5dcc33",
          "title": "Unreal Log Viewer - Timestamp Formatting Tests",
          "fullFile": "p:\\prj\\UnrealLogViewer\\unreal-log-extension\\out\\test\\ui\\logReceiving.test.js",
          "file": "p:\\prj\\UnrealLogViewer\\unreal-log-extension\\out\\test\\ui\\logReceiving.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Unreal Log Viewer - Timestamp Formatting Tests\"",
              "fullTitle": "Unreal Log Viewer - Timestamp Formatting Tests \"before all\" hook in \"Unreal Log Viewer - Timestamp Formatting Tests\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const config = vscode.workspace.getConfiguration('unrealLogViewer');\nconst settingKey = 'useRelativeTimestamps';\nconst formatKey = 'timestampFormat';\n// 1. Inspect and store original values\noriginalUseRelativeInspection = config.inspect(settingKey);\noriginalTimestampFormatInspection = config.inspect(formatKey);\nconsole.log(`Timestamp Suite - BEFORE - Initial inspection of ${settingKey}:`, JSON.stringify(originalUseRelativeInspection, null, 2));\nconsole.log(`Timestamp Suite - BEFORE - Initial inspection of ${formatKey}:`, JSON.stringify(originalTimestampFormatInspection, null, 2));\n// Store effective values\noriginalRelativeSettingForTimestampTests = config.get(settingKey);\noriginalTimestampFormatForTimestampTests = config.get(formatKey);\nconsole.log(`Timestamp Suite - BEFORE - Saved initial settings. Effective ${settingKey}: ${originalRelativeSettingForTimestampTests}, Effective ${formatKey}: ${originalTimestampFormatForTimestampTests}`);",
              "err": {},
              "uuid": "3a640125-cca8-4952-96eb-c5cc4f74be7a",
              "parentUUID": "8b016c79-e86e-429b-b5c2-e62d9d5dcc33",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Unreal Log Viewer - Timestamp Formatting Tests\"",
              "fullTitle": "Unreal Log Viewer - Timestamp Formatting Tests \"before each\" hook in \"Unreal Log Viewer - Timestamp Formatting Tests\"",
              "timedOut": false,
              "duration": 100,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Each test will now be responsible for setting its config and then clearing logs.\nconsole.log(\"Timestamp Suite - beforeEach: (No longer clearing logs here)\");\n// Ensure any config changes from a previous test in this suite are processed before the next one starts.\nawait (0, testUtils_1.delay)((0, testUtils_1.getSetupCompletionDelayMs)()); // Updated",
              "err": {},
              "uuid": "fb2a4161-d0d9-480a-bfff-91fe8aba8181",
              "parentUUID": "8b016c79-e86e-429b-b5c2-e62d9d5dcc33",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Unreal Log Viewer - Timestamp Formatting Tests\"",
              "fullTitle": "Unreal Log Viewer - Timestamp Formatting Tests \"after all\" hook in \"Unreal Log Viewer - Timestamp Formatting Tests\"",
              "timedOut": false,
              "duration": 530,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const config = vscode.workspace.getConfiguration('unrealLogViewer');\nconst settingKey = 'useRelativeTimestamps';\nconst formatKey = 'timestampFormat';\nconsole.log(`Timestamp Suite - AFTER - Restoring original settings...`);\n// Restore to original effective values, and attempt to clear workspace overrides specifically.\n// This is a simplified restoration. A more complex one would use the full inspection details.\nawait config.update(settingKey, originalRelativeSettingForTimestampTests, vscode.ConfigurationTarget.Global);\nawait config.update(settingKey, undefined, vscode.ConfigurationTarget.Workspace); // Clear potential workspace override\nawait config.update(formatKey, originalTimestampFormatForTimestampTests, vscode.ConfigurationTarget.Global);\nawait config.update(formatKey, undefined, vscode.ConfigurationTarget.Workspace); // Clear potential workspace override\nawait (0, testUtils_1.delay)((0, testUtils_1.getCommandExecutionDelayMs)() * 5); // Updated\nconsole.log(`Timestamp Suite - AFTER - Settings restored. Effective ${settingKey}: ${config.get(settingKey)}, Effective ${formatKey}: ${config.get(formatKey)}`);\nconst finalInspection = config.inspect(settingKey);\nconsole.log(`Timestamp Suite - AFTER - Final inspection of ${settingKey} after restore:`, JSON.stringify(finalInspection, null, 2));",
              "err": {},
              "uuid": "d5dd87aa-d4b0-483e-9911-71c28b087376",
              "parentUUID": "8b016c79-e86e-429b-b5c2-e62d9d5dcc33",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "test 0002: should display absolute timestamp correctly (HH:mm:ss.SSS)",
              "fullTitle": "Unreal Log Viewer - Timestamp Formatting Tests test 0002: should display absolute timestamp correctly (HH:mm:ss.SSS)",
              "timedOut": false,
              "duration": 1611,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(20000);\nlet config = vscode.workspace.getConfiguration('unrealLogViewer'); // Initial fetch\nconst settingKey = 'useRelativeTimestamps';\nconst formatKey = 'timestampFormat';\nconsole.log(`Test 0002 - START - Initial effective value of ${settingKey}: ${config.get(settingKey)}`);\nlet currentInspection = config.inspect(settingKey);\nconsole.log(`Test 0002 - START - Initial inspection of ${settingKey}:`, JSON.stringify(currentInspection, null, 2));\n// Attempt to set to false for this test\nconsole.log(`Test 0002 - Attempting to set ${settingKey} to false and ${formatKey} to HH:mm:ss.SSS`);\nawait config.update(settingKey, false, vscode.ConfigurationTarget.Global);\nawait config.update(formatKey, 'HH:mm:ss.SSS', vscode.ConfigurationTarget.Global);\nawait (0, testUtils_1.delay)(1000); // Increased delay for settings to propagate\nconfig = vscode.workspace.getConfiguration('unrealLogViewer'); // Re-fetch config\nconst currentEffectiveValue = config.get(settingKey);\ncurrentInspection = config.inspect(settingKey);\nconsole.log(`Test 0002 - After update attempts - Effective value of ${settingKey}: ${currentEffectiveValue}`);\nconsole.log(`Test 0002 - After update attempts - Inspection of ${settingKey}:`, JSON.stringify(currentInspection, null, 2));\nassert.strictEqual(currentEffectiveValue, false, `Test 0002: Configuration '${settingKey}' should be false. Effective: ${currentEffectiveValue}. Inspection: ${JSON.stringify(currentInspection)}`);\n// Clear logs AFTER settings are applied and verified for this test\nawait (0, testUtils_1.clearLogs)();\nawait (0, testUtils_1.delay)((0, testUtils_1.getLogProcessingDelayMs)()); // Updated\nconst currentIsoTimestamp = new Date().toISOString();\nconst testLog = { ...baseLogEntry, date: currentIsoTimestamp };\nconst testLogMessage = JSON.stringify(testLog) + '\\n';\nawait (0, testUtils_1.sendTcpLogMessage)(testUtils_1.TEST_PORT, testLogMessage, 'Absolute Timestamp Test: '); // Use TEST_PORT\nawait (0, testUtils_1.delay)((0, testUtils_1.getLogProcessingDelayMs)() * 2); // Updated\nconst receivedLog = await (0, testUtils_1.getAndVerifyLogEntry)(testLog, 'Absolute Timestamp Test');\nassert.ok(receivedLog, 'Log entry for absolute timestamp test should be present.');\n// Simulate the provider's behavior for expected time calculation:\n// 1. The provider receives an ISO string (e.g., \"2025-05-21T00:05:19.462Z\")\n// 2. It strips the 'Z' -> \"2025-05-21T00:05:19.462\"\n// 3. It parses this Z-stripped string with `new Date()`, which interprets it as local time.\nconst timestampWithoutZ = currentIsoTimestamp.endsWith('Z')\n    ? currentIsoTimestamp.slice(0, -1)\n    : currentIsoTimestamp;\nconst dateAsParsedByProvider = new Date(timestampWithoutZ);\nconst h = dateAsParsedByProvider.getHours().toString().padStart(2, '0');\nconst m = dateAsParsedByProvider.getMinutes().toString().padStart(2, '0');\nconst s = dateAsParsedByProvider.getSeconds().toString().padStart(2, '0');\nconst ms = dateAsParsedByProvider.getMilliseconds().toString().padStart(3, '0');\nconst expectedTime = `${h}:${m}:${s}.${ms}`;\nassert.strictEqual(receivedLog.date, expectedTime, `Absolute timestamp should match provider's parsing logic. Expected: \"${expectedTime}\", Actual: \"${receivedLog.date}\". ` +\n    `Input ISO: ${currentIsoTimestamp}. Effective '${settingKey}' was: ${currentEffectiveValue}. Timestamp sent to provider: ${timestampWithoutZ}`);",
              "err": {},
              "uuid": "ce4d8477-7ef3-4bdb-8423-e1bd56c9ba23",
              "parentUUID": "8b016c79-e86e-429b-b5c2-e62d9d5dcc33",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "test 0003: should display relative timestamp correctly (+HH:MM:SS.mmm)",
              "fullTitle": "Unreal Log Viewer - Timestamp Formatting Tests test 0003: should display relative timestamp correctly (+HH:MM:SS.mmm)",
              "timedOut": false,
              "duration": 1622,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(15000);\nlet config = vscode.workspace.getConfiguration('unrealLogViewer'); // Initial fetch\nconst settingKey = 'useRelativeTimestamps';\nconsole.log(`Test 0003 - START - Initial effective value of ${settingKey}: ${config.get(settingKey)}`);\nlet currentInspection = config.inspect(settingKey);\nconsole.log(`Test 0003 - START - Initial inspection of ${settingKey}:`, JSON.stringify(currentInspection, null, 2));\n// Attempt to set to true for this test\nconsole.log(`Test 0003 - Attempting to set ${settingKey} to true...`);\nawait config.update(settingKey, true, vscode.ConfigurationTarget.Global);\nawait (0, testUtils_1.delay)(1000); // Increased delay for settings to propagate\nconfig = vscode.workspace.getConfiguration('unrealLogViewer'); // Re-fetch config\nconst currentEffectiveValue = config.get(settingKey);\ncurrentInspection = config.inspect(settingKey);\nconsole.log(`Test 0003 - After update attempts - Effective value of ${settingKey}: ${currentEffectiveValue}`);\nconsole.log(`Test 0003 - After update attempts - Inspection of ${settingKey}:`, JSON.stringify(currentInspection, null, 2));\nassert.strictEqual(currentEffectiveValue, true, `Test 0003: Configuration '${settingKey}' should be true. Effective: ${currentEffectiveValue}. Inspection: ${JSON.stringify(currentInspection)}`);\n// Clear logs AFTER settings are applied and verified\nawait (0, testUtils_1.clearLogs)();\nawait (0, testUtils_1.delay)((0, testUtils_1.getLogProcessingDelayMs)()); // Updated\nconst currentIsoTimestamp = new Date().toISOString();\nconst testLog = { ...baseLogEntry, date: currentIsoTimestamp, category: 'RelativeTimestampTest' };\nconst testLogMessage = JSON.stringify(testLog) + '\\n';\nawait (0, testUtils_1.sendTcpLogMessage)(testUtils_1.TEST_PORT, testLogMessage, 'Relative Timestamp Test: '); // Use TEST_PORT\nawait (0, testUtils_1.delay)((0, testUtils_1.getLogProcessingDelayMs)() * 2); // Updated\nconst receivedLog = await (0, testUtils_1.getAndVerifyLogEntry)(testLog, 'Relative Timestamp Test');\nassert.ok(receivedLog, 'Log entry for relative timestamp test should be present.');\nassert.match(receivedLog.date, /^\\+\\d{2}:\\d{2}:\\d{2}\\.\\d{3}$/, `The timestamp \"${receivedLog.date}\" should be relative. Effective '${settingKey}' was: ${currentEffectiveValue}. ` +\n    `Input ISO: ${currentIsoTimestamp}.`);\nconsole.log(`Relative timestamp received: ${receivedLog.date}`);",
              "err": {},
              "uuid": "e45ca943-b2b4-4504-b3c9-6247b6b89086",
              "parentUUID": "8b016c79-e86e-429b-b5c2-e62d9d5dcc33",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ce4d8477-7ef3-4bdb-8423-e1bd56c9ba23",
            "e45ca943-b2b4-4504-b3c9-6247b6b89086"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3233,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "48cc6acd-251e-43df-ba4a-1c5471d95955",
          "title": "Pause Functionality Tests",
          "fullFile": "p:\\prj\\UnrealLogViewer\\unreal-log-extension\\out\\test\\ui\\pause.test.js",
          "file": "p:\\prj\\UnrealLogViewer\\unreal-log-extension\\out\\test\\ui\\pause.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Pause Functionality Tests\"",
              "fullTitle": "Pause Functionality Tests \"before all\" hook in \"Pause Functionality Tests\"",
              "timedOut": false,
              "duration": 610,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await (0, testUtils_1.activateExtension)();\nawait (0, testUtils_1.focusUnrealLogView)();\nconst config = vscode.workspace.getConfiguration('unrealLogViewer');\noriginalUseRelativeTimestamps = config.get('useRelativeTimestamps');\noriginalTimestampFormat = config.get('timestampFormat');\nawait config.update('useRelativeTimestamps', false, vscode.ConfigurationTarget.Global);\nawait config.update('timestampFormat', 'HH:mm:ss.SSS', vscode.ConfigurationTarget.Global);\nawait (0, testUtils_1.delay)((0, testUtils_1.getSetupCompletionDelayMs)()); // Updated",
              "err": {},
              "uuid": "68e563a5-6b9b-4748-b423-2993775e3396",
              "parentUUID": "48cc6acd-251e-43df-ba4a-1c5471d95955",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Pause Functionality Tests\"",
              "fullTitle": "Pause Functionality Tests \"before each\" hook in \"Pause Functionality Tests\"",
              "timedOut": false,
              "duration": 603,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await (0, testUtils_1.focusUnrealLogView)();\nawait (0, testUtils_1.clearLogs)();\nawait vscode.commands.executeCommand('unrealLogViewer.setFiltersForTest', { levelFilter: '', categoryFilter: '', messageFilter: '' });\nconst isPaused = await vscode.commands.executeCommand('unrealLogViewer.getPauseStateForTest');\nif (isPaused) {\n    await vscode.commands.executeCommand('unrealLogViewer.togglePauseForTest');\n}\nawait (0, testUtils_1.delay)((0, testUtils_1.getSetupCompletionDelayMs)()); // Updated",
              "err": {},
              "uuid": "ab680a12-2e93-4d01-b5d7-302d5292fee2",
              "parentUUID": "48cc6acd-251e-43df-ba4a-1c5471d95955",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Pause Functionality Tests\"",
              "fullTitle": "Pause Functionality Tests \"after all\" hook in \"Pause Functionality Tests\"",
              "timedOut": false,
              "duration": 110,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const config = vscode.workspace.getConfiguration('unrealLogViewer');\nawait config.update('useRelativeTimestamps', originalUseRelativeTimestamps, vscode.ConfigurationTarget.Global);\nawait config.update('timestampFormat', originalTimestampFormat, vscode.ConfigurationTarget.Global);\nawait (0, testUtils_1.delay)((0, testUtils_1.getCommandExecutionDelayMs)()); // Updated",
              "err": {},
              "uuid": "ace32745-3e99-4f11-80f3-00d707e54ff2",
              "parentUUID": "48cc6acd-251e-43df-ba4a-1c5471d95955",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Pause Functionality Tests\"",
              "fullTitle": "Pause Functionality Tests \"after each\" hook in \"Pause Functionality Tests\"",
              "timedOut": false,
              "duration": 603,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await (0, testUtils_1.focusUnrealLogView)();\nconst isPaused = await vscode.commands.executeCommand('unrealLogViewer.getPauseStateForTest');\nif (isPaused) {\n    await vscode.commands.executeCommand('unrealLogViewer.togglePauseForTest');\n}\nawait (0, testUtils_1.clearLogs)();\nawait vscode.commands.executeCommand('unrealLogViewer.setFiltersForTest', { levelFilter: '', categoryFilter: '', messageFilter: '' });\nawait (0, testUtils_1.delay)((0, testUtils_1.getCommandExecutionDelayMs)()); // Updated",
              "err": {},
              "uuid": "3953629d-5535-438e-9237-4ba4a9eb0739",
              "parentUUID": "48cc6acd-251e-43df-ba4a-1c5471d95955",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "test 0009: should not display new logs when paused",
              "fullTitle": "Pause Functionality Tests test 0009: should not display new logs when paused",
              "timedOut": false,
              "duration": 505,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const initialLog = { date: new Date().toISOString(), level: 'Log', category: 'PauseTest.0009', message: 'Initial log before pause 0009' };\nawait (0, testUtils_1.sendTcpLogMessage)(testUtils_1.TEST_PORT, JSON.stringify(initialLog));\nawait (0, testUtils_1.delay)((0, testUtils_1.getLogProcessingDelayMs)()); // Updated\nlet displayedLogs = await (0, testUtils_1.getDisplayedLogMessages)();\nassert.strictEqual(displayedLogs.length, 1, 'Test 0009: Initial log should be displayed');\nawait vscode.commands.executeCommand('unrealLogViewer.togglePauseForTest');\nawait (0, testUtils_1.delay)((0, testUtils_1.getCommandExecutionDelayMs)()); // Updated\nconst isPaused = await vscode.commands.executeCommand('unrealLogViewer.getPauseStateForTest');\nassert.strictEqual(isPaused, true, 'Test 0009: Should be paused');\nconst pausedLog = { date: new Date().toISOString(), level: 'Warning', category: 'PauseTest.0009', message: 'Log sent while paused 0009' };\nawait (0, testUtils_1.sendTcpLogMessage)(testUtils_1.TEST_PORT, JSON.stringify(pausedLog));\nawait (0, testUtils_1.delay)((0, testUtils_1.getLogProcessingDelayMs)()); // Updated\ndisplayedLogs = await (0, testUtils_1.getDisplayedLogMessages)();\nassert.strictEqual(displayedLogs.length, 1, 'Test 0009: No new logs should be displayed when paused. Count should be 1.');\nassert.strictEqual(displayedLogs[0].message, initialLog.message, 'Test 0009: The initially displayed log should still be the one visible');",
              "err": {},
              "uuid": "dc27a38f-b2c8-4308-8fe8-fe06a116903f",
              "parentUUID": "48cc6acd-251e-43df-ba4a-1c5471d95955",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "test 0010: should display queued logs when resumed",
              "fullTitle": "Pause Functionality Tests test 0010: should display queued logs when resumed",
              "timedOut": false,
              "duration": 503,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await vscode.commands.executeCommand('unrealLogViewer.togglePauseForTest');\nawait (0, testUtils_1.delay)((0, testUtils_1.getCommandExecutionDelayMs)()); // Updated\nconst isPausedStateBeforeSending = await vscode.commands.executeCommand('unrealLogViewer.getPauseStateForTest');\nassert.strictEqual(isPausedStateBeforeSending, true, 'Test 0010: Should be paused initially');\nconst logWhilePaused1 = { date: new Date().toISOString(), level: 'Log', category: 'ResumeTest.0010', message: 'Queued log 1 0010' };\nconst logWhilePaused2 = { date: new Date().toISOString(), level: 'Error', category: 'ResumeTest.0010', message: 'Queued log 2 0010' };\nawait (0, testUtils_1.sendTcpLogMessage)(testUtils_1.TEST_PORT, JSON.stringify(logWhilePaused1));\nawait (0, testUtils_1.sendTcpLogMessage)(testUtils_1.TEST_PORT, JSON.stringify(logWhilePaused2));\nawait (0, testUtils_1.delay)((0, testUtils_1.getLogProcessingDelayMs)()); // Updated\nlet displayedLogs = await (0, testUtils_1.getDisplayedLogMessages)();\nassert.strictEqual(displayedLogs.length, 0, 'Test 0010: No logs should be displayed while paused and before any initial logs in this test context');\nawait vscode.commands.executeCommand('unrealLogViewer.togglePauseForTest'); // Resume\nawait (0, testUtils_1.delay)((0, testUtils_1.getLogProcessingDelayMs)()); // Updated\ndisplayedLogs = await (0, testUtils_1.getDisplayedLogMessages)();\nassert.strictEqual(displayedLogs.length, 2, 'Test 0010: Queued logs should be displayed after resume');\nassert.ok(displayedLogs.find(log => log.message === logWhilePaused1.message), 'Test 0010: Queued log 1 not found after resume');\nassert.ok(displayedLogs.find(log => log.message === logWhilePaused2.message), 'Test 0010: Queued log 2 not found after resume');",
              "err": {},
              "uuid": "998022e4-5e68-4ac6-b41b-db00180ef911",
              "parentUUID": "48cc6acd-251e-43df-ba4a-1c5471d95955",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "test 0011: should correctly report pause state via command",
              "fullTitle": "Pause Functionality Tests test 0011: should correctly report pause state via command",
              "timedOut": false,
              "duration": 202,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const initialPauseState = await vscode.commands.executeCommand('unrealLogViewer.getPauseStateForTest');\nassert.strictEqual(initialPauseState, false, 'Test 0011: Initial pause state should be false');\nawait vscode.commands.executeCommand('unrealLogViewer.togglePauseForTest');\nawait (0, testUtils_1.delay)((0, testUtils_1.getCommandExecutionDelayMs)()); // Updated\nconst pausedState = await vscode.commands.executeCommand('unrealLogViewer.getPauseStateForTest');\nassert.strictEqual(pausedState, true, 'Test 0011: Pause state should be true after toggling once');\nawait vscode.commands.executeCommand('unrealLogViewer.togglePauseForTest');\nawait (0, testUtils_1.delay)((0, testUtils_1.getCommandExecutionDelayMs)()); // Updated\nconst unpausedState = await vscode.commands.executeCommand('unrealLogViewer.getPauseStateForTest');\nassert.strictEqual(unpausedState, false, 'Test 0011: Pause state should be false after toggling again');",
              "err": {},
              "uuid": "5b822485-da4a-4157-82bc-8d31993fd616",
              "parentUUID": "48cc6acd-251e-43df-ba4a-1c5471d95955",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dc27a38f-b2c8-4308-8fe8-fe06a116903f",
            "998022e4-5e68-4ac6-b41b-db00180ef911",
            "5b822485-da4a-4157-82bc-8d31993fd616"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1210,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 20000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "P:\\prj\\UnrealLogViewer\\unreal-log-extension\\test-results\\mochawesome",
        "reportFilename": "report",
        "quiet": true,
        "json": true,
        "html": true
      },
      "version": "6.2.0"
    }
  }
}