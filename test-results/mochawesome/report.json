{
  "stats": {
    "suites": 6,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "start": "2025-05-21T21:07:35.433Z",
    "end": "2025-05-21T21:07:58.495Z",
    "duration": 23062,
    "testsRegistered": 14,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "4834c1d8-33e2-4c5a-ba20-ea24760a75be",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 1071,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "await (0, testUtils_1.activateExtension)();\nawait (0, testUtils_1.focusUnrealLogView)();\nawait (0, testUtils_1.delay)(testUtils_1.WEBVIEW_READY_DELAY_MS); // Ensure webview is ready",
          "err": {},
          "uuid": "4f2ddcc7-e65a-434f-ab80-b2a27d20d724",
          "parentUUID": "4834c1d8-33e2-4c5a-ba20-ea24760a75be",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 502,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "await (0, testUtils_1.activateExtension)();\nawait (0, testUtils_1.focusUnrealLogView)();",
          "err": {},
          "uuid": "ebd0d090-ae76-49d7-a266-998dcb1de09d",
          "parentUUID": "4834c1d8-33e2-4c5a-ba20-ea24760a75be",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "896ddd8b-d3bc-42e0-84af-ce8eac5c7d4a",
          "title": "Unreal Log Viewer Extension - Basic Tests",
          "fullFile": "p:\\prj\\UnrealLogViewer\\unreal-log-extension\\out\\test\\ui\\basic.test.js",
          "file": "p:\\prj\\UnrealLogViewer\\unreal-log-extension\\out\\test\\ui\\basic.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should activate the extension",
              "fullTitle": "Unreal Log Viewer Extension - Basic Tests should activate the extension",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const extension = vscode.extensions.getExtension('coregames.unreal-log-viewer');\nassert.ok(extension, 'Extension should be found.');\n// Add a non-null assertion here since assert.ok already checks for undefined\nawait extension.activate();\nassert.ok(extension.isActive, 'Extension should be active after activation.');",
              "err": {},
              "uuid": "2b7413eb-72de-4e54-a8d9-5c5085a3378c",
              "parentUUID": "896ddd8b-d3bc-42e0-84af-ce8eac5c7d4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should open the Unreal Log Viewer view",
              "fullTitle": "Unreal Log Viewer Extension - Basic Tests should open the Unreal Log Viewer view",
              "timedOut": false,
              "duration": 1526,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const extension = vscode.extensions.getExtension('coregames.unreal-log-viewer');\nassert.ok(extension, 'Extension should be found to open view.'); // Ensure extension is found\n// Check if extension is defined before accessing isActive or calling activate\nif (extension) {\n    if (!extension.isActive) {\n        await extension.activate();\n    }\n    assert.ok(extension.isActive, 'Extension must be active to open view.');\n    // --- Layout Modification --- \n    console.log('Arranging views: Focusing Unreal Log Viewer...');\n    await vscode.commands.executeCommand('unrealLogViewerView3.focus');\n    await new Promise(resolve => setTimeout(resolve, 500)); // Delay for focus\n    console.log('Arranging views: Attempting to move Unreal Log Viewer to Panel...');\n    try {\n        await vscode.commands.executeCommand('workbench.action.moveFocusedViewToPanel');\n        console.log('Command \"workbench.action.moveFocusedViewToPanel\" executed.');\n    }\n    catch (error) {\n        console.warn('Could not move Unreal Log Viewer to panel. It might already be there, not be movable, or the command failed:', error);\n    }\n    await new Promise(resolve => setTimeout(resolve, 500)); // Delay for move\n    console.log('Arranging views: Focusing Terminal...');\n    await vscode.commands.executeCommand('workbench.action.terminal.focus');\n    await new Promise(resolve => setTimeout(resolve, 500)); // Delay for terminal focus\n    // --- End of Layout Modification ---\n    //      console.log('Starting 10-second delay for manual observation of layout...');\n    //      await new Promise(resolve => setTimeout(resolve, 10000)); // 10 seconds delay for manual check\n    // Original assertion was that focus was attempted. \n    // Now, it asserts that the layout process was attempted for manual verification.\n    assert.ok(true, 'Layout arrangement process attempted. Please verify manually during the delay.');\n}\nelse {\n    // This case should ideally not be reached if the first assert.ok(extension, ...) passes\n    // but it satisfies the compiler's concern about extension being potentially undefined.\n    assert.fail('Extension was not found, cannot proceed to open view.');\n}",
              "err": {},
              "uuid": "6ffd4319-360b-4249-b018-895670d35038",
              "parentUUID": "896ddd8b-d3bc-42e0-84af-ce8eac5c7d4a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2b7413eb-72de-4e54-a8d9-5c5085a3378c",
            "6ffd4319-360b-4249-b018-895670d35038"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1526,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "e0a655f1-ace2-4d94-bad7-ec4815501125",
          "title": "Unreal Log Viewer - Filter Controls UI Tests",
          "fullFile": "p:\\prj\\UnrealLogViewer\\unreal-log-extension\\out\\test\\ui\\filterControls.test.js",
          "file": "p:\\prj\\UnrealLogViewer\\unreal-log-extension\\out\\test\\ui\\filterControls.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "test 0004: should toggle filter visibility when \"Toggle Filter Bar\" command is executed",
              "fullTitle": "Unreal Log Viewer - Filter Controls UI Tests test 0004: should toggle filter visibility when \"Toggle Filter Bar\" command is executed",
              "timedOut": false,
              "duration": 1652,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(20000); // Increased timeout for UI operations\nawait (0, testUtils_1.focusUnrealLogView)(); // Ensure the view is focused\nawait (0, testUtils_1.delay)(testUtils_1.WEBVIEW_READY_DELAY_MS);\n// 1. Get initial state of the filter container\nlet filterControlsElements = await (0, testUtils_1.getWebviewElements)('#filter-controls');\nassert.ok(filterControlsElements.length > 0, 'Filter controls div should exist.');\nlet filterControlsDiv = filterControlsElements[0];\nconst initialIsHidden = filterControlsDiv.attributes.class?.includes('hidden') ?? false;\nconsole.log('Initial filter controls hidden state:', initialIsHidden);\n// 2. Execute the command to toggle filter bar visibility\nconsole.log('Executing command unrealLogViewer.toggleFilterBarVisibility...');\nawait vscode.commands.executeCommand('unrealLogViewer.toggleFilterBarVisibility');\nawait (0, testUtils_1.delay)(testUtils_1.COMMAND_EXECUTION_DELAY_MS + 200); // Allow UI to update (added a bit more delay for message passing)\n// 3. Get new state of the filter container\nfilterControlsElements = await (0, testUtils_1.getWebviewElements)('#filter-controls');\nassert.ok(filterControlsElements.length > 0, 'Filter controls div should still exist.');\nfilterControlsDiv = filterControlsElements[0];\nconst isHiddenAfterFirstToggle = filterControlsDiv.attributes.class?.includes('hidden') ?? false;\nconsole.log('Filter controls hidden state after first toggle:', isHiddenAfterFirstToggle);\n// Assert that the hidden state has changed\nassert.notStrictEqual(isHiddenAfterFirstToggle, initialIsHidden, `Filter controls hidden state should change after first toggle. Initial: ${initialIsHidden}, After toggle: ${isHiddenAfterFirstToggle}`);\n// 4. Execute the command again to toggle back\nconsole.log('Executing command unrealLogViewer.toggleFilterBarVisibility again...');\nawait vscode.commands.executeCommand('unrealLogViewer.toggleFilterBarVisibility');\nawait (0, testUtils_1.delay)(testUtils_1.COMMAND_EXECUTION_DELAY_MS + 200); // Allow UI to update\n// 5. Get final state of the filter container\nfilterControlsElements = await (0, testUtils_1.getWebviewElements)('#filter-controls');\nassert.ok(filterControlsElements.length > 0, 'Filter controls div should still exist after second toggle.');\nfilterControlsDiv = filterControlsElements[0];\nconst isHiddenAfterSecondToggle = filterControlsDiv.attributes.class?.includes('hidden') ?? false;\nconsole.log('Filter controls hidden state after second toggle:', isHiddenAfterSecondToggle);\n// Assert that the hidden state has reverted to the initial state\nassert.strictEqual(isHiddenAfterSecondToggle, initialIsHidden, `Filter controls hidden state should revert to initial after second toggle. Initial: ${initialIsHidden}, After second toggle: ${isHiddenAfterSecondToggle}`);",
              "err": {},
              "uuid": "6966eea9-cc6e-49a8-a95d-8ec7033aba13",
              "parentUUID": "e0a655f1-ace2-4d94-bad7-ec4815501125",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6966eea9-cc6e-49a8-a95d-8ec7033aba13"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1652,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "d487ef45-0038-4faf-a558-8b3f6151cd15",
          "title": "UI Filtering Tests",
          "fullFile": "p:\\prj\\UnrealLogViewer\\unreal-log-extension\\out\\test\\ui\\filtering.test.js",
          "file": "p:\\prj\\UnrealLogViewer\\unreal-log-extension\\out\\test\\ui\\filtering.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"UI Filtering Tests\"",
              "fullTitle": "UI Filtering Tests \"before all\" hook in \"UI Filtering Tests\"",
              "timedOut": false,
              "duration": 611,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await (0, testUtils_1.activateExtension)();\nawait (0, testUtils_1.focusUnrealLogView)();\nconst config = vscode.workspace.getConfiguration('unrealLogViewer');\noriginalUseRelativeTimestamps = config.get('useRelativeTimestamps');\noriginalTimestampFormat = config.get('timestampFormat');\nawait config.update('useRelativeTimestamps', false, vscode.ConfigurationTarget.Global);\nawait config.update('timestampFormat', 'HH:mm:ss.SSS', vscode.ConfigurationTarget.Global);\nawait (0, testUtils_1.delay)(testUtils_1.SETUP_COMPLETION_DELAY_MS);",
              "err": {},
              "uuid": "b8aa4826-2dfa-45f5-b4a8-10a998009d85",
              "parentUUID": "d487ef45-0038-4faf-a558-8b3f6151cd15",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"UI Filtering Tests\"",
              "fullTitle": "UI Filtering Tests \"before each\" hook in \"UI Filtering Tests\"",
              "timedOut": false,
              "duration": 603,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await (0, testUtils_1.focusUnrealLogView)();\nawait (0, testUtils_1.clearLogs)();\nawait vscode.commands.executeCommand('unrealLogViewer.setFiltersForTest', { levelFilter: '', categoryFilter: '', messageFilter: '' });\nconst isPaused = await vscode.commands.executeCommand('unrealLogViewer.getPauseStateForTest');\nif (isPaused) {\n    await vscode.commands.executeCommand('unrealLogViewer.togglePauseForTest');\n}\nawait (0, testUtils_1.delay)(testUtils_1.SETUP_COMPLETION_DELAY_MS);",
              "err": {},
              "uuid": "ef6a6d36-45aa-496a-bbed-bb67f44c9bf9",
              "parentUUID": "d487ef45-0038-4faf-a558-8b3f6151cd15",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"UI Filtering Tests\"",
              "fullTitle": "UI Filtering Tests \"after all\" hook in \"UI Filtering Tests\"",
              "timedOut": false,
              "duration": 112,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const config = vscode.workspace.getConfiguration('unrealLogViewer');\nawait config.update('useRelativeTimestamps', originalUseRelativeTimestamps, vscode.ConfigurationTarget.Global);\nawait config.update('timestampFormat', originalTimestampFormat, vscode.ConfigurationTarget.Global);\nawait (0, testUtils_1.delay)(testUtils_1.COMMAND_EXECUTION_DELAY_MS);",
              "err": {},
              "uuid": "d5c586d7-2fb4-4d3b-9917-25232beed662",
              "parentUUID": "d487ef45-0038-4faf-a558-8b3f6151cd15",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"UI Filtering Tests\"",
              "fullTitle": "UI Filtering Tests \"after each\" hook in \"UI Filtering Tests\"",
              "timedOut": false,
              "duration": 603,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await (0, testUtils_1.focusUnrealLogView)();\nconst isPaused = await vscode.commands.executeCommand('unrealLogViewer.getPauseStateForTest');\nif (isPaused) {\n    await vscode.commands.executeCommand('unrealLogViewer.togglePauseForTest');\n}\nawait (0, testUtils_1.clearLogs)();\nawait vscode.commands.executeCommand('unrealLogViewer.setFiltersForTest', { levelFilter: '', categoryFilter: '', messageFilter: '' });\nawait (0, testUtils_1.delay)(testUtils_1.COMMAND_EXECUTION_DELAY_MS);",
              "err": {},
              "uuid": "647e923c-f306-4065-9b56-a25c6f485558",
              "parentUUID": "d487ef45-0038-4faf-a558-8b3f6151cd15",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "test 0004: should filter by log level (Error)",
              "fullTitle": "UI Filtering Tests test 0004: should filter by log level (Error)",
              "timedOut": false,
              "duration": 407,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const logError = { date: new Date().toISOString(), level: 'Error', category: 'TestCat.0004', message: 'Error message 0004' };\nconst logWarning = { date: new Date().toISOString(), level: 'Warning', category: 'TestCat.0004', message: 'Warning message 0004' };\nconst logInfo = { date: new Date().toISOString(), level: 'Log', category: 'TestCat.0004', message: 'Info message 0004' };\nawait (0, testUtils_1.sendTcpLogMessage)(testUtils_1.TEST_PORT, JSON.stringify(logError));\nawait (0, testUtils_1.sendTcpLogMessage)(testUtils_1.TEST_PORT, JSON.stringify(logWarning));\nawait (0, testUtils_1.sendTcpLogMessage)(testUtils_1.TEST_PORT, JSON.stringify(logInfo));\nawait (0, testUtils_1.delay)(testUtils_1.LOG_PROCESSING_DELAY_MS);\nawait vscode.commands.executeCommand('unrealLogViewer.setFiltersForTest', { levelFilter: 'Error' });\nawait (0, testUtils_1.delay)(testUtils_1.COMMAND_EXECUTION_DELAY_MS);\nlet displayedLogs = await (0, testUtils_1.getDisplayedLogMessages)();\nassert.strictEqual(displayedLogs.length, 1, 'Test 0004: Should display only 1 log after filtering by Error level');\nassert.strictEqual(displayedLogs[0].message, logError.message, 'Test 0004: Displayed log message mismatch');\nassert.strictEqual(displayedLogs[0].level, 'Error', 'Test 0004: Displayed log level mismatch');\nawait vscode.commands.executeCommand('unrealLogViewer.setFiltersForTest', { levelFilter: '' });\nawait (0, testUtils_1.delay)(testUtils_1.COMMAND_EXECUTION_DELAY_MS);\ndisplayedLogs = await (0, testUtils_1.getDisplayedLogMessages)();\nassert.strictEqual(displayedLogs.length, 3, 'Test 0004: Should display all 3 logs after clearing level filter');",
              "err": {},
              "uuid": "7bbab492-47c4-4f4d-aaaa-d36f0f10e5d4",
              "parentUUID": "d487ef45-0038-4faf-a558-8b3f6151cd15",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "test 0005: should filter by category",
              "fullTitle": "UI Filtering Tests test 0005: should filter by category",
              "timedOut": false,
              "duration": 306,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const logCatA = { date: new Date().toISOString(), level: 'Log', category: 'CategoryA.0005', message: 'Message for CategoryA 0005' };\nconst logCatB = { date: new Date().toISOString(), level: 'Log', category: 'CategoryB.0005', message: 'Message for CategoryB 0005' };\nawait (0, testUtils_1.sendTcpLogMessage)(testUtils_1.TEST_PORT, JSON.stringify(logCatA));\nawait (0, testUtils_1.sendTcpLogMessage)(testUtils_1.TEST_PORT, JSON.stringify(logCatB));\nawait (0, testUtils_1.delay)(testUtils_1.LOG_PROCESSING_DELAY_MS);\nawait vscode.commands.executeCommand('unrealLogViewer.setFiltersForTest', { categoryFilter: 'CategoryA.0005' });\nawait (0, testUtils_1.delay)(testUtils_1.COMMAND_EXECUTION_DELAY_MS);\nconst displayedLogs = await (0, testUtils_1.getDisplayedLogMessages)();\nassert.strictEqual(displayedLogs.length, 1, 'Test 0005: Should display only 1 log after filtering by CategoryA.0005');\nassert.strictEqual(displayedLogs[0].category, 'CategoryA.0005', 'Test 0005: Displayed log category mismatch');",
              "err": {},
              "uuid": "da741ea2-c8a9-4474-9981-4843050fc039",
              "parentUUID": "d487ef45-0038-4faf-a558-8b3f6151cd15",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "test 0006: should filter by message content",
              "fullTitle": "UI Filtering Tests test 0006: should filter by message content",
              "timedOut": false,
              "duration": 304,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const logMsg1 = { date: new Date().toISOString(), level: 'Log', category: 'MessageTest.0006', message: 'This is a unique message content 0006' };\nconst logMsg2 = { date: new Date().toISOString(), level: 'Log', category: 'MessageTest.0006', message: 'Another message 0006' };\nawait (0, testUtils_1.sendTcpLogMessage)(testUtils_1.TEST_PORT, JSON.stringify(logMsg1));\nawait (0, testUtils_1.sendTcpLogMessage)(testUtils_1.TEST_PORT, JSON.stringify(logMsg2));\nawait (0, testUtils_1.delay)(testUtils_1.LOG_PROCESSING_DELAY_MS);\nawait vscode.commands.executeCommand('unrealLogViewer.setFiltersForTest', { messageFilter: 'unique message content' });\nawait (0, testUtils_1.delay)(testUtils_1.COMMAND_EXECUTION_DELAY_MS);\nconst displayedLogs = await (0, testUtils_1.getDisplayedLogMessages)();\nassert.strictEqual(displayedLogs.length, 1, 'Test 0006: Should display only 1 log after filtering by message content');\nassert.strictEqual(displayedLogs[0].message, logMsg1.message, 'Test 0006: Displayed log message mismatch');",
              "err": {},
              "uuid": "0733efa9-be6b-4381-9a03-763077cb3ee2",
              "parentUUID": "d487ef45-0038-4faf-a558-8b3f6151cd15",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "test 0007: should filter by multiple criteria (level and category)",
              "fullTitle": "UI Filtering Tests test 0007: should filter by multiple criteria (level and category)",
              "timedOut": false,
              "duration": 307,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const logErrorCatA = { date: new Date().toISOString(), level: 'Error', category: 'FilterCatA.0007', message: 'Error in FilterCatA 0007' };\nconst logWarnCatA = { date: new Date().toISOString(), level: 'Warning', category: 'FilterCatA.0007', message: 'Warning in FilterCatA 0007' };\nconst logErrorCatB = { date: new Date().toISOString(), level: 'Error', category: 'FilterCatB.0007', message: 'Error in FilterCatB 0007' };\nawait (0, testUtils_1.sendTcpLogMessage)(testUtils_1.TEST_PORT, JSON.stringify(logErrorCatA));\nawait (0, testUtils_1.sendTcpLogMessage)(testUtils_1.TEST_PORT, JSON.stringify(logWarnCatA));\nawait (0, testUtils_1.sendTcpLogMessage)(testUtils_1.TEST_PORT, JSON.stringify(logErrorCatB));\nawait (0, testUtils_1.delay)(testUtils_1.LOG_PROCESSING_DELAY_MS);\nawait vscode.commands.executeCommand('unrealLogViewer.setFiltersForTest', { levelFilter: 'Error', categoryFilter: 'FilterCatA.0007' });\nawait (0, testUtils_1.delay)(testUtils_1.COMMAND_EXECUTION_DELAY_MS);\nconst displayedLogs = await (0, testUtils_1.getDisplayedLogMessages)();\nassert.strictEqual(displayedLogs.length, 1, 'Test 0007: Should display only 1 log after filtering by Error level and FilterCatA.0007');\nassert.strictEqual(displayedLogs[0].message, logErrorCatA.message, 'Test 0007: Displayed log message mismatch');",
              "err": {},
              "uuid": "8d3d6e6c-9b34-48a1-b8df-c68597397631",
              "parentUUID": "d487ef45-0038-4faf-a558-8b3f6151cd15",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "test 0008: should clear all filters",
              "fullTitle": "UI Filtering Tests test 0008: should clear all filters",
              "timedOut": false,
              "duration": 405,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const log1 = { date: new Date().toISOString(), level: 'Error', category: 'ClearTest.0008', message: 'First message for clear test 0008' };\nconst log2 = { date: new Date().toISOString(), level: 'Log', category: 'ClearTest.0008', message: 'Second message for clear test 0008' };\nawait (0, testUtils_1.sendTcpLogMessage)(testUtils_1.TEST_PORT, JSON.stringify(log1));\nawait (0, testUtils_1.sendTcpLogMessage)(testUtils_1.TEST_PORT, JSON.stringify(log2));\nawait (0, testUtils_1.delay)(testUtils_1.LOG_PROCESSING_DELAY_MS);\nawait vscode.commands.executeCommand('unrealLogViewer.setFiltersForTest', { levelFilter: 'Error' });\nawait (0, testUtils_1.delay)(testUtils_1.COMMAND_EXECUTION_DELAY_MS);\nlet displayedLogs = await (0, testUtils_1.getDisplayedLogMessages)();\nassert.strictEqual(displayedLogs.length, 1, 'Test 0008: Should show 1 log after initial filter');\nawait vscode.commands.executeCommand('unrealLogViewer.setFiltersForTest', { levelFilter: '', categoryFilter: '', messageFilter: '' });\nawait (0, testUtils_1.delay)(testUtils_1.COMMAND_EXECUTION_DELAY_MS);\ndisplayedLogs = await (0, testUtils_1.getDisplayedLogMessages)();\nassert.strictEqual(displayedLogs.length, 2, 'Test 0008: Should show all 2 logs after clearing filters');",
              "err": {},
              "uuid": "445a546d-5e94-490e-a1a8-f2868e539cc0",
              "parentUUID": "d487ef45-0038-4faf-a558-8b3f6151cd15",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7bbab492-47c4-4f4d-aaaa-d36f0f10e5d4",
            "da741ea2-c8a9-4474-9981-4843050fc039",
            "0733efa9-be6b-4381-9a03-763077cb3ee2",
            "8d3d6e6c-9b34-48a1-b8df-c68597397631",
            "445a546d-5e94-490e-a1a8-f2868e539cc0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1729,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "b504c5a2-8074-4c67-90b6-fcabccddf972",
          "title": "Unreal Log Viewer - Basic Log Reception",
          "fullFile": "p:\\prj\\UnrealLogViewer\\unreal-log-extension\\out\\test\\ui\\logReceiving.test.js",
          "file": "p:\\prj\\UnrealLogViewer\\unreal-log-extension\\out\\test\\ui\\logReceiving.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "test 0001: should receive and display a simple log message via TCP",
              "fullTitle": "Unreal Log Viewer - Basic Log Reception test 0001: should receive and display a simple log message via TCP",
              "timedOut": false,
              "duration": 303,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(15000);\nconst testLog = {\n    date: new Date().toISOString(), // Use current time for simplicity in this basic test\n    category: 'BasicTest',\n    level: 'Info',\n    message: 'Basic TCP log reception test.'\n};\nconst testLogMessage = JSON.stringify(testLog) + '\\n';\nawait (0, testUtils_1.delay)(testUtils_1.LOG_PROCESSING_DELAY_MS); // Use constant\nawait (0, testUtils_1.sendTcpLogMessage)(testUtils_1.TEST_PORT, testLogMessage, 'Basic Reception Test: '); // Use TEST_PORT\nawait (0, testUtils_1.delay)(testUtils_1.COMMAND_EXECUTION_DELAY_MS); // Use constant\nconst receivedLog = await (0, testUtils_1.getAndVerifyLogEntry)(testLog, 'Basic Reception Test');\nassert.ok(receivedLog, 'The basic test log entry should be present.');",
              "err": {},
              "uuid": "243d4226-0695-4f71-856e-14f94a25c088",
              "parentUUID": "b504c5a2-8074-4c67-90b6-fcabccddf972",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "243d4226-0695-4f71-856e-14f94a25c088"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 303,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "d7770a55-a128-4257-8137-5db022246ad3",
          "title": "Unreal Log Viewer - Timestamp Formatting Tests",
          "fullFile": "p:\\prj\\UnrealLogViewer\\unreal-log-extension\\out\\test\\ui\\logReceiving.test.js",
          "file": "p:\\prj\\UnrealLogViewer\\unreal-log-extension\\out\\test\\ui\\logReceiving.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Unreal Log Viewer - Timestamp Formatting Tests\"",
              "fullTitle": "Unreal Log Viewer - Timestamp Formatting Tests \"before all\" hook in \"Unreal Log Viewer - Timestamp Formatting Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const config = vscode.workspace.getConfiguration('unrealLogViewer');\nconst settingKey = 'useRelativeTimestamps';\nconst formatKey = 'timestampFormat';\n// 1. Inspect and store original values\noriginalUseRelativeInspection = config.inspect(settingKey);\noriginalTimestampFormatInspection = config.inspect(formatKey);\nconsole.log(`Timestamp Suite - BEFORE - Initial inspection of ${settingKey}:`, JSON.stringify(originalUseRelativeInspection, null, 2));\nconsole.log(`Timestamp Suite - BEFORE - Initial inspection of ${formatKey}:`, JSON.stringify(originalTimestampFormatInspection, null, 2));\n// Store effective values\noriginalRelativeSettingForTimestampTests = config.get(settingKey);\noriginalTimestampFormatForTimestampTests = config.get(formatKey);\nconsole.log(`Timestamp Suite - BEFORE - Saved initial settings. Effective ${settingKey}: ${originalRelativeSettingForTimestampTests}, Effective ${formatKey}: ${originalTimestampFormatForTimestampTests}`);",
              "err": {},
              "uuid": "56e25850-83a3-428d-8985-cf8490bfd6f9",
              "parentUUID": "d7770a55-a128-4257-8137-5db022246ad3",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Unreal Log Viewer - Timestamp Formatting Tests\"",
              "fullTitle": "Unreal Log Viewer - Timestamp Formatting Tests \"before each\" hook in \"Unreal Log Viewer - Timestamp Formatting Tests\"",
              "timedOut": false,
              "duration": 101,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Each test will now be responsible for setting its config and then clearing logs.\nconsole.log(\"Timestamp Suite - beforeEach: (No longer clearing logs here)\");\n// Ensure any config changes from a previous test in this suite are processed before the next one starts.\nawait (0, testUtils_1.delay)(testUtils_1.SETUP_COMPLETION_DELAY_MS);",
              "err": {},
              "uuid": "b5f76f5d-bbd5-4a4a-aef2-d74b06d6401c",
              "parentUUID": "d7770a55-a128-4257-8137-5db022246ad3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Unreal Log Viewer - Timestamp Formatting Tests\"",
              "fullTitle": "Unreal Log Viewer - Timestamp Formatting Tests \"after all\" hook in \"Unreal Log Viewer - Timestamp Formatting Tests\"",
              "timedOut": false,
              "duration": 536,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const config = vscode.workspace.getConfiguration('unrealLogViewer');\nconst settingKey = 'useRelativeTimestamps';\nconst formatKey = 'timestampFormat';\nconsole.log(`Timestamp Suite - AFTER - Restoring original settings...`);\n// Restore to original effective values, and attempt to clear workspace overrides specifically.\n// This is a simplified restoration. A more complex one would use the full inspection details.\nawait config.update(settingKey, originalRelativeSettingForTimestampTests, vscode.ConfigurationTarget.Global);\nawait config.update(settingKey, undefined, vscode.ConfigurationTarget.Workspace); // Clear potential workspace override\nawait config.update(formatKey, originalTimestampFormatForTimestampTests, vscode.ConfigurationTarget.Global);\nawait config.update(formatKey, undefined, vscode.ConfigurationTarget.Workspace); // Clear potential workspace override\nawait (0, testUtils_1.delay)(testUtils_1.COMMAND_EXECUTION_DELAY_MS * 5); // Ensure settings are restored\nconsole.log(`Timestamp Suite - AFTER - Settings restored. Effective ${settingKey}: ${config.get(settingKey)}, Effective ${formatKey}: ${config.get(formatKey)}`);\nconst finalInspection = config.inspect(settingKey);\nconsole.log(`Timestamp Suite - AFTER - Final inspection of ${settingKey} after restore:`, JSON.stringify(finalInspection, null, 2));",
              "err": {},
              "uuid": "7d41a09a-47f7-42c6-9068-7f13bbd20784",
              "parentUUID": "d7770a55-a128-4257-8137-5db022246ad3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "test 0002: should display absolute timestamp correctly (HH:mm:ss.SSS)",
              "fullTitle": "Unreal Log Viewer - Timestamp Formatting Tests test 0002: should display absolute timestamp correctly (HH:mm:ss.SSS)",
              "timedOut": false,
              "duration": 1612,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(20000);\nlet config = vscode.workspace.getConfiguration('unrealLogViewer'); // Initial fetch\nconst settingKey = 'useRelativeTimestamps';\nconst formatKey = 'timestampFormat';\nconsole.log(`Test 0002 - START - Initial effective value of ${settingKey}: ${config.get(settingKey)}`);\nlet currentInspection = config.inspect(settingKey);\nconsole.log(`Test 0002 - START - Initial inspection of ${settingKey}:`, JSON.stringify(currentInspection, null, 2));\n// Attempt to set to false for this test\nconsole.log(`Test 0002 - Attempting to set ${settingKey} to false and ${formatKey} to HH:mm:ss.SSS`);\nawait config.update(settingKey, false, vscode.ConfigurationTarget.Global);\nawait config.update(formatKey, 'HH:mm:ss.SSS', vscode.ConfigurationTarget.Global);\nawait (0, testUtils_1.delay)(1000); // Increased delay for settings to propagate\nconfig = vscode.workspace.getConfiguration('unrealLogViewer'); // Re-fetch config\nconst currentEffectiveValue = config.get(settingKey);\ncurrentInspection = config.inspect(settingKey);\nconsole.log(`Test 0002 - After update attempts - Effective value of ${settingKey}: ${currentEffectiveValue}`);\nconsole.log(`Test 0002 - After update attempts - Inspection of ${settingKey}:`, JSON.stringify(currentInspection, null, 2));\nassert.strictEqual(currentEffectiveValue, false, `Test 0002: Configuration '${settingKey}' should be false. Effective: ${currentEffectiveValue}. Inspection: ${JSON.stringify(currentInspection)}`);\n// Clear logs AFTER settings are applied and verified for this test\nawait (0, testUtils_1.clearLogs)();\nawait (0, testUtils_1.delay)(testUtils_1.LOG_PROCESSING_DELAY_MS);\nconst currentIsoTimestamp = new Date().toISOString();\nconst testLog = { ...baseLogEntry, date: currentIsoTimestamp };\nconst testLogMessage = JSON.stringify(testLog) + '\\n';\nawait (0, testUtils_1.sendTcpLogMessage)(testUtils_1.TEST_PORT, testLogMessage, 'Absolute Timestamp Test: '); // Use TEST_PORT\nawait (0, testUtils_1.delay)(testUtils_1.LOG_PROCESSING_DELAY_MS * 2);\nconst receivedLog = await (0, testUtils_1.getAndVerifyLogEntry)(testLog, 'Absolute Timestamp Test');\nassert.ok(receivedLog, 'Log entry for absolute timestamp test should be present.');\n// Simulate the provider's behavior for expected time calculation:\n// 1. The provider receives an ISO string (e.g., \"2025-05-21T00:05:19.462Z\")\n// 2. It strips the 'Z' -> \"2025-05-21T00:05:19.462\"\n// 3. It parses this Z-stripped string with `new Date()`, which interprets it as local time.\nconst timestampWithoutZ = currentIsoTimestamp.endsWith('Z')\n    ? currentIsoTimestamp.slice(0, -1)\n    : currentIsoTimestamp;\nconst dateAsParsedByProvider = new Date(timestampWithoutZ);\nconst h = dateAsParsedByProvider.getHours().toString().padStart(2, '0');\nconst m = dateAsParsedByProvider.getMinutes().toString().padStart(2, '0');\nconst s = dateAsParsedByProvider.getSeconds().toString().padStart(2, '0');\nconst ms = dateAsParsedByProvider.getMilliseconds().toString().padStart(3, '0');\nconst expectedTime = `${h}:${m}:${s}.${ms}`;\nassert.strictEqual(receivedLog.date, expectedTime, `Absolute timestamp should match provider's parsing logic. Expected: \"${expectedTime}\", Actual: \"${receivedLog.date}\". ` +\n    `Input ISO: ${currentIsoTimestamp}. Effective '${settingKey}' was: ${currentEffectiveValue}. Timestamp sent to provider: ${timestampWithoutZ}`);",
              "err": {},
              "uuid": "5478d2c3-de6c-4c6b-86e6-ea7799b9664c",
              "parentUUID": "d7770a55-a128-4257-8137-5db022246ad3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "test 0003: should display relative timestamp correctly (+HH:MM:SS.mmm)",
              "fullTitle": "Unreal Log Viewer - Timestamp Formatting Tests test 0003: should display relative timestamp correctly (+HH:MM:SS.mmm)",
              "timedOut": false,
              "duration": 1624,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(15000);\nlet config = vscode.workspace.getConfiguration('unrealLogViewer'); // Initial fetch\nconst settingKey = 'useRelativeTimestamps';\nconsole.log(`Test 0003 - START - Initial effective value of ${settingKey}: ${config.get(settingKey)}`);\nlet currentInspection = config.inspect(settingKey);\nconsole.log(`Test 0003 - START - Initial inspection of ${settingKey}:`, JSON.stringify(currentInspection, null, 2));\n// Attempt to set to true for this test\nconsole.log(`Test 0003 - Attempting to set ${settingKey} to true...`);\nawait config.update(settingKey, true, vscode.ConfigurationTarget.Global);\nawait (0, testUtils_1.delay)(1000); // Increased delay for settings to propagate\nconfig = vscode.workspace.getConfiguration('unrealLogViewer'); // Re-fetch config\nconst currentEffectiveValue = config.get(settingKey);\ncurrentInspection = config.inspect(settingKey);\nconsole.log(`Test 0003 - After update attempts - Effective value of ${settingKey}: ${currentEffectiveValue}`);\nconsole.log(`Test 0003 - After update attempts - Inspection of ${settingKey}:`, JSON.stringify(currentInspection, null, 2));\nassert.strictEqual(currentEffectiveValue, true, `Test 0003: Configuration '${settingKey}' should be true. Effective: ${currentEffectiveValue}. Inspection: ${JSON.stringify(currentInspection)}`);\n// Clear logs AFTER settings are applied and verified\nawait (0, testUtils_1.clearLogs)();\nawait (0, testUtils_1.delay)(testUtils_1.LOG_PROCESSING_DELAY_MS);\nconst currentIsoTimestamp = new Date().toISOString();\nconst testLog = { ...baseLogEntry, date: currentIsoTimestamp, category: 'RelativeTimestampTest' };\nconst testLogMessage = JSON.stringify(testLog) + '\\n';\nawait (0, testUtils_1.sendTcpLogMessage)(testUtils_1.TEST_PORT, testLogMessage, 'Relative Timestamp Test: '); // Use TEST_PORT\nawait (0, testUtils_1.delay)(testUtils_1.LOG_PROCESSING_DELAY_MS * 2); // Increased delay for processing\nconst receivedLog = await (0, testUtils_1.getAndVerifyLogEntry)(testLog, 'Relative Timestamp Test');\nassert.ok(receivedLog, 'Log entry for relative timestamp test should be present.');\nassert.match(receivedLog.date, /^\\+\\d{2}:\\d{2}:\\d{2}\\.\\d{3}$/, `The timestamp \"${receivedLog.date}\" should be relative. Effective '${settingKey}' was: ${currentEffectiveValue}. ` +\n    `Input ISO: ${currentIsoTimestamp}.`);\nconsole.log(`Relative timestamp received: ${receivedLog.date}`);",
              "err": {},
              "uuid": "f7fea737-cce0-4625-89ab-51708a8d10de",
              "parentUUID": "d7770a55-a128-4257-8137-5db022246ad3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5478d2c3-de6c-4c6b-86e6-ea7799b9664c",
            "f7fea737-cce0-4625-89ab-51708a8d10de"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3236,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "626e1b33-afeb-4bb4-b9db-786e8f9f7ce7",
          "title": "Pause Functionality Tests",
          "fullFile": "p:\\prj\\UnrealLogViewer\\unreal-log-extension\\out\\test\\ui\\pause.test.js",
          "file": "p:\\prj\\UnrealLogViewer\\unreal-log-extension\\out\\test\\ui\\pause.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Pause Functionality Tests\"",
              "fullTitle": "Pause Functionality Tests \"before all\" hook in \"Pause Functionality Tests\"",
              "timedOut": false,
              "duration": 609,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await (0, testUtils_1.activateExtension)();\nawait (0, testUtils_1.focusUnrealLogView)();\nconst config = vscode.workspace.getConfiguration('unrealLogViewer');\noriginalUseRelativeTimestamps = config.get('useRelativeTimestamps');\noriginalTimestampFormat = config.get('timestampFormat');\nawait config.update('useRelativeTimestamps', false, vscode.ConfigurationTarget.Global);\nawait config.update('timestampFormat', 'HH:mm:ss.SSS', vscode.ConfigurationTarget.Global);\nawait (0, testUtils_1.delay)(testUtils_2.SETUP_COMPLETION_DELAY_MS);",
              "err": {},
              "uuid": "ffbb8d8d-0ebc-4121-97c3-4c3bd3e6d2ea",
              "parentUUID": "626e1b33-afeb-4bb4-b9db-786e8f9f7ce7",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Pause Functionality Tests\"",
              "fullTitle": "Pause Functionality Tests \"before each\" hook in \"Pause Functionality Tests\"",
              "timedOut": false,
              "duration": 603,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await (0, testUtils_1.focusUnrealLogView)();\nawait (0, testUtils_1.clearLogs)();\n// Ensure filters are cleared for pause tests, as they might interact\nawait vscode.commands.executeCommand('unrealLogViewer.setFiltersForTest', { levelFilter: '', categoryFilter: '', messageFilter: '' });\nconst isPaused = await vscode.commands.executeCommand('unrealLogViewer.getPauseStateForTest');\nif (isPaused) {\n    await vscode.commands.executeCommand('unrealLogViewer.togglePauseForTest'); // Ensure starts unpaused\n}\nawait (0, testUtils_1.delay)(testUtils_2.SETUP_COMPLETION_DELAY_MS);",
              "err": {},
              "uuid": "3e91c2c9-d90e-401b-a7ff-023e24d89634",
              "parentUUID": "626e1b33-afeb-4bb4-b9db-786e8f9f7ce7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Pause Functionality Tests\"",
              "fullTitle": "Pause Functionality Tests \"after all\" hook in \"Pause Functionality Tests\"",
              "timedOut": false,
              "duration": 110,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const config = vscode.workspace.getConfiguration('unrealLogViewer');\nawait config.update('useRelativeTimestamps', originalUseRelativeTimestamps, vscode.ConfigurationTarget.Global);\nawait config.update('timestampFormat', originalTimestampFormat, vscode.ConfigurationTarget.Global);\nawait (0, testUtils_1.delay)(testUtils_2.COMMAND_EXECUTION_DELAY_MS);",
              "err": {},
              "uuid": "921957b8-a9a7-4fcb-91a9-c6189f9b1c2b",
              "parentUUID": "626e1b33-afeb-4bb4-b9db-786e8f9f7ce7",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Pause Functionality Tests\"",
              "fullTitle": "Pause Functionality Tests \"after each\" hook in \"Pause Functionality Tests\"",
              "timedOut": false,
              "duration": 602,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await (0, testUtils_1.focusUnrealLogView)();\nconst isPaused = await vscode.commands.executeCommand('unrealLogViewer.getPauseStateForTest');\nif (isPaused) {\n    await vscode.commands.executeCommand('unrealLogViewer.togglePauseForTest');\n}\nawait (0, testUtils_1.clearLogs)();\n// Clear filters after pause tests\nawait vscode.commands.executeCommand('unrealLogViewer.setFiltersForTest', { levelFilter: '', categoryFilter: '', messageFilter: '' });\nawait (0, testUtils_1.delay)(testUtils_2.COMMAND_EXECUTION_DELAY_MS);",
              "err": {},
              "uuid": "9dd17ab6-46e8-4360-b98c-882d67899716",
              "parentUUID": "626e1b33-afeb-4bb4-b9db-786e8f9f7ce7",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "test 0009: should not display new logs when paused",
              "fullTitle": "Pause Functionality Tests test 0009: should not display new logs when paused",
              "timedOut": false,
              "duration": 503,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const initialLog = { date: new Date().toISOString(), level: 'Log', category: 'PauseTest.0009', message: 'Initial log before pause 0009' };\nawait (0, testUtils_1.sendTcpLogMessage)(testUtils_2.TEST_PORT, JSON.stringify(initialLog));\nawait (0, testUtils_1.delay)(testUtils_2.LOG_PROCESSING_DELAY_MS);\nlet displayedLogs = await (0, testUtils_1.getDisplayedLogMessages)();\nassert.strictEqual(displayedLogs.length, 1, 'Test 0009: Initial log should be displayed');\nawait vscode.commands.executeCommand('unrealLogViewer.togglePauseForTest');\nawait (0, testUtils_1.delay)(testUtils_2.COMMAND_EXECUTION_DELAY_MS);\nconst isPaused = await vscode.commands.executeCommand('unrealLogViewer.getPauseStateForTest');\nassert.strictEqual(isPaused, true, 'Test 0009: Should be paused');\nconst pausedLog = { date: new Date().toISOString(), level: 'Warning', category: 'PauseTest.0009', message: 'Log sent while paused 0009' };\nawait (0, testUtils_1.sendTcpLogMessage)(testUtils_2.TEST_PORT, JSON.stringify(pausedLog));\nawait (0, testUtils_1.delay)(testUtils_2.LOG_PROCESSING_DELAY_MS);\ndisplayedLogs = await (0, testUtils_1.getDisplayedLogMessages)();\nassert.strictEqual(displayedLogs.length, 1, 'Test 0009: No new logs should be displayed when paused. Count should be 1.');\nassert.strictEqual(displayedLogs[0].message, initialLog.message, 'Test 0009: The initially displayed log should still be the one visible');",
              "err": {},
              "uuid": "c5490e81-18c6-49ac-aeba-54d5f677297f",
              "parentUUID": "626e1b33-afeb-4bb4-b9db-786e8f9f7ce7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "test 0010: should display queued logs when resumed",
              "fullTitle": "Pause Functionality Tests test 0010: should display queued logs when resumed",
              "timedOut": false,
              "duration": 506,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await vscode.commands.executeCommand('unrealLogViewer.togglePauseForTest');\nawait (0, testUtils_1.delay)(testUtils_2.COMMAND_EXECUTION_DELAY_MS);\nconst isPausedStateBeforeSending = await vscode.commands.executeCommand('unrealLogViewer.getPauseStateForTest');\nassert.strictEqual(isPausedStateBeforeSending, true, 'Test 0010: Should be paused initially');\nconst logWhilePaused1 = { date: new Date().toISOString(), level: 'Log', category: 'ResumeTest.0010', message: 'Queued log 1 0010' };\nconst logWhilePaused2 = { date: new Date().toISOString(), level: 'Error', category: 'ResumeTest.0010', message: 'Queued log 2 0010' };\nawait (0, testUtils_1.sendTcpLogMessage)(testUtils_2.TEST_PORT, JSON.stringify(logWhilePaused1));\nawait (0, testUtils_1.sendTcpLogMessage)(testUtils_2.TEST_PORT, JSON.stringify(logWhilePaused2));\nawait (0, testUtils_1.delay)(testUtils_2.LOG_PROCESSING_DELAY_MS);\nlet displayedLogs = await (0, testUtils_1.getDisplayedLogMessages)();\nassert.strictEqual(displayedLogs.length, 0, 'Test 0010: No logs should be displayed while paused and before any initial logs in this test context');\nawait vscode.commands.executeCommand('unrealLogViewer.togglePauseForTest'); // Resume\nawait (0, testUtils_1.delay)(testUtils_2.LOG_PROCESSING_DELAY_MS); // Allow time for queued logs to process\ndisplayedLogs = await (0, testUtils_1.getDisplayedLogMessages)();\nassert.strictEqual(displayedLogs.length, 2, 'Test 0010: Queued logs should be displayed after resume');\nassert.ok(displayedLogs.find(log => log.message === logWhilePaused1.message), 'Test 0010: Queued log 1 not found after resume');\nassert.ok(displayedLogs.find(log => log.message === logWhilePaused2.message), 'Test 0010: Queued log 2 not found after resume');",
              "err": {},
              "uuid": "aff369af-bf11-4822-8e15-0388508a271a",
              "parentUUID": "626e1b33-afeb-4bb4-b9db-786e8f9f7ce7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "test 0011: should correctly report pause state via command",
              "fullTitle": "Pause Functionality Tests test 0011: should correctly report pause state via command",
              "timedOut": false,
              "duration": 201,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const initialPauseState = await vscode.commands.executeCommand('unrealLogViewer.getPauseStateForTest');\nassert.strictEqual(initialPauseState, false, 'Test 0011: Initial pause state should be false');\nawait vscode.commands.executeCommand('unrealLogViewer.togglePauseForTest');\nawait (0, testUtils_1.delay)(testUtils_2.COMMAND_EXECUTION_DELAY_MS);\nconst pausedState = await vscode.commands.executeCommand('unrealLogViewer.getPauseStateForTest');\nassert.strictEqual(pausedState, true, 'Test 0011: Pause state should be true after toggling once');\nawait vscode.commands.executeCommand('unrealLogViewer.togglePauseForTest');\nawait (0, testUtils_1.delay)(testUtils_2.COMMAND_EXECUTION_DELAY_MS);\nconst unpausedState = await vscode.commands.executeCommand('unrealLogViewer.getPauseStateForTest');\nassert.strictEqual(unpausedState, false, 'Test 0011: Pause state should be false after toggling again');",
              "err": {},
              "uuid": "d2adf836-cc8b-4d00-96ec-d82eb2c4f6af",
              "parentUUID": "626e1b33-afeb-4bb4-b9db-786e8f9f7ce7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c5490e81-18c6-49ac-aeba-54d5f677297f",
            "aff369af-bf11-4822-8e15-0388508a271a",
            "d2adf836-cc8b-4d00-96ec-d82eb2c4f6af"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1210,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 20000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "P:\\prj\\UnrealLogViewer\\unreal-log-extension\\test-results\\mochawesome",
        "reportFilename": "report",
        "quiet": true,
        "json": true,
        "html": true
      },
      "version": "6.2.0"
    }
  }
}